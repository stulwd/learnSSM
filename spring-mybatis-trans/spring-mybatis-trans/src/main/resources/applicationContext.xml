<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
            init-method="init" destroy-method="close">
        <property name="username"   value="${jdbc.username}"/>
        <property name="url"        value="${jdbc.url}"/>
        <property name="password"   value="${jdbc.password}"/>
        <property name="maxActive"  value="20"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.lwdHouse.dao"/>
    </bean>

    <context:component-scan base-package="com.lwdHouse.service"/>

<!--事务处理的两种方式-->
<!--方式一：-->
<!--    &lt;!&ndash;使用spring的事务处理&ndash;&gt;-->
<!--    &lt;!&ndash; 1. 声明事务管理器  &ndash;&gt;-->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        &lt;!&ndash; 连接的数据库&ndash;&gt;-->
<!--        <property name="dataSource" ref="myDataSource"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash; 开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象&ndash;&gt;-->
<!--    <tx:annotation-driven transaction-manager="transactionManager"/>-->

<!--方式二：适合大型项目-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--name: 方法名称，1）完整的方法名称，不带有包和类名
                              2）方法可以使用通配符,* 表示任意字符
                propagation: 传播行为，枚举值
                isolation: 隔离级别
                rollback-for: 需要回滚的异常类名-->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException;com.lwdHouse.excep.NotEnoughException" />
            <tx:method name="add*" propagation="REQUIRES_NEW"/>
            <tx:method name="modify*" />
            <tx:method name="remove*"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--    配置aop-->
    <aop:config>
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>

</beans>